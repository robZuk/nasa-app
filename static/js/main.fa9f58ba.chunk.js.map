{"version":3,"sources":["Components/Spinner.js","constans/constans.js","Components/Event.js","Components/Cluster.js","Components/LocationInfoBox.js","Components/Header.js","store.js","Components/Map.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","viewBox","cx","cy","r","fill","strokeWidth","ICES","STORMS","ICE_SRC","STORM_SRC","Event","cluster","setLocationInfo","d","Date","EventIcon","src","alt","onClick","id","properties","evId","title","date","toISOString","slice","category","Cluster","superclusters","lat","lng","pointCount","type","mapRef","closeLocationInfo","ClusterIcon","expansionZoom","Math","min","getClusterExpansionZoom","current","setZoom","panTo","LocationInfoBox","info","Icon","setEventsType","event","useState","activeIcon","setActiveIcon","prevState","showEvents","prevActiveIcon","Header","StoreContext","React","createContext","children","useRef","eventsData","setEventsData","data","setData","searchedData","setSearchedData","searchedEventPosition","setSearchedEventPosition","locationInfo","loading","setLoading","setError","useEffect","a","fetch","res","json","events","wildfires","filter","ev","categories","volcanoes","ices","storms","fetchEvents","store","storeLoading","Provider","value","Map","useContext","bounds","setBounds","zoom","eventsType","points","undefined","map","geometries","length","geometry","coordinates","parseFloat","wildfiresPoints","volcanoesPoints","icesPoints","stormsPoints","useClusterHook","useSupercluster","options","radius","maxZoom","clusters","supercluster","wildfiresClusters","volcanoesClusters","icesClusters","stormsClusters","markers","longitude","latitude","isCluster","point_count","eventClassName","key","bootstrapURLKeys","process","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","onChange","nw","se","Search","inputValue","setInputValue","state","setState","toggleDrawer","open","Fragment","Button","fontSize","sx","m","color","grey","Drawer","onClose","Box","component","width","noValidate","autoComplete","onSubmit","e","regex","RegExp","test","searchEvents","preventDefault","TextField","label","variant","InputProps","endAdornment","InputAdornment","position","IconButton","edge","target","role","onKeyDown","List","ListItem","button","ListItemIcon","Avatar","bgcolor","ListItemText","primary","App","dotenv","config","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa9f58ba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <div>\r\n      <svg className=\"spinner\" viewBox=\"0 0 50 50\">\r\n        <circle\r\n          className=\"path\"\r\n          cx=\"25\"\r\n          cy=\"25\"\r\n          r=\"20\"\r\n          fill=\"none\"\r\n          strokeWidth=\"5\"\r\n        ></circle>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","export const WILDFIRES = \"Wildfires\";\r\nexport const VOLCANOES = \"Volcanoes\";\r\nexport const ICES = \"Sea and Lake Ice\";\r\nexport const STORMS = \"Severe Storms\";\r\n\r\nexport const WILDFIRE_SRC = \"./icons/fire4.png\";\r\nexport const VOLCANO_SRC = \"./icons/volcano3.png\";\r\nexport const ICE_SRC = \"./icons/iceberg2.png\";\r\nexport const STORM_SRC = \"./icons/storm3.png\";\r\n","import React from \"react\";\r\nimport { WILDFIRES, VOLCANOES, ICES, STORMS } from \"../constans/constans\";\r\nimport {\r\n  WILDFIRE_SRC,\r\n  VOLCANO_SRC,\r\n  ICE_SRC,\r\n  STORM_SRC,\r\n} from \"../constans/constans\";\r\n\r\nconst Event = ({ cluster, setLocationInfo, className }) => {\r\n  const d = new Date();\r\n  const EventIcon = ({ src, alt, cluster }) => {\r\n    return (\r\n      <button\r\n        className={`marker${className}`}\r\n        onClick={() =>\r\n          setLocationInfo({\r\n            id: cluster.properties.evId,\r\n            title: cluster.properties.title,\r\n            date: d.toISOString(cluster.properties.date).slice(0, 10),\r\n          })\r\n        }\r\n      >\r\n        <img src={src} alt={alt} />\r\n      </button>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      {cluster.properties.category === WILDFIRES && (\r\n        <EventIcon src={WILDFIRE_SRC} alt={WILDFIRES} cluster={cluster} />\r\n      )}\r\n      {cluster.properties.category === VOLCANOES && (\r\n        <EventIcon src={VOLCANO_SRC} alt={VOLCANOES} cluster={cluster} />\r\n      )}\r\n      {cluster.properties.category === STORMS && (\r\n        <EventIcon src={STORM_SRC} alt={STORMS} cluster={cluster} />\r\n      )}\r\n      {cluster.properties.category === ICES && (\r\n        <EventIcon src={ICE_SRC} alt={ICES} cluster={cluster} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Event;\r\n","import React from \"react\";\r\nimport { WILDFIRES, VOLCANOES, ICES, STORMS } from \"../constans/constans\";\r\n\r\nconst Cluster = ({\r\n  cluster,\r\n  superclusters,\r\n  lat,\r\n  lng,\r\n  pointCount,\r\n  type,\r\n  mapRef,\r\n  closeLocationInfo,\r\n}) => {\r\n  const ClusterIcon = ({ className }) => {\r\n    return (\r\n      <div\r\n        className={className}\r\n        onClick={() => {\r\n          const expansionZoom = Math.min(\r\n            superclusters.getClusterExpansionZoom(cluster.id),\r\n            20\r\n          );\r\n          mapRef.current.setZoom(expansionZoom);\r\n          mapRef.current.panTo({ lat, lng });\r\n          closeLocationInfo();\r\n        }}\r\n      >\r\n        {pointCount}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {type === WILDFIRES && (\r\n        <ClusterIcon className={\"cluster-marker cluster-marker-wildfires\"} />\r\n      )}\r\n      {type === VOLCANOES && (\r\n        <ClusterIcon className={\"cluster-marker cluster-marker-volcanoes\"} />\r\n      )}\r\n      {type === ICES && (\r\n        <ClusterIcon className={\"cluster-marker cluster-marker-ices\"} />\r\n      )}\r\n      {type === STORMS && (\r\n        <ClusterIcon className={\"cluster-marker cluster-marker-storms\"} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cluster;\r\n","import React from \"react\";\r\nconst LocationInfoBox = ({ info, closeLocationInfo }) => {\r\n  return (\r\n    <div className=\"location-info\">\r\n      <h2>Event Location Info</h2>\r\n      <ul>\r\n        <li>\r\n          ID: <strong>{info.id}</strong>\r\n        </li>\r\n        <li>\r\n          TITLE: <strong>{info.title}</strong>\r\n        </li>\r\n        <li>\r\n          DATE: <strong>{info.date}</strong>\r\n        </li>\r\n      </ul>\r\n      <div className=\"close-button\" onClick={closeLocationInfo}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationInfoBox;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  WILDFIRE_SRC,\r\n  VOLCANO_SRC,\r\n  ICE_SRC,\r\n  STORM_SRC,\r\n} from \"../constans/constans\";\r\nimport { WILDFIRES, VOLCANOES, ICES, STORMS } from \"../constans/constans\";\r\n\r\nconst showEvents = (setEventsType, event) => {\r\n  setEventsType((prevState) => ({\r\n    ...prevState,\r\n    [event]: !prevState[event],\r\n  }));\r\n};\r\n\r\nconst Icon = ({ src, alt, setEventsType, event }) => {\r\n  const [activeIcon, setActiveIcon] = useState(true);\r\n  return (\r\n    <button\r\n      className={`marker map-header-icon${!activeIcon && \"-active\"}`}\r\n      onClick={() => {\r\n        showEvents(setEventsType, event);\r\n        setActiveIcon((prevActiveIcon) => !prevActiveIcon);\r\n      }}\r\n    >\r\n      <img src={src} alt={alt} className=\"map-header-img\" />\r\n    </button>\r\n  );\r\n};\r\nconst Header = ({ setEventsType }) => {\r\n  return (\r\n    <div className=\"map-header\">\r\n      <Icon\r\n        src={WILDFIRE_SRC}\r\n        alt={WILDFIRES}\r\n        setEventsType={setEventsType}\r\n        event=\"wildfires\"\r\n      />\r\n      <Icon\r\n        src={VOLCANO_SRC}\r\n        alt={VOLCANOES}\r\n        setEventsType={setEventsType}\r\n        event=\"volcanoes\"\r\n      />\r\n      <Icon\r\n        src={ICE_SRC}\r\n        alt={ICES}\r\n        setEventsType={setEventsType}\r\n        event=\"ices\"\r\n      />\r\n      <Icon\r\n        src={STORM_SRC}\r\n        alt={STORMS}\r\n        setEventsType={setEventsType}\r\n        event=\"storms\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { WILDFIRES, VOLCANOES, ICES, STORMS } from \"./constans/constans\";\r\n\r\nexport const StoreContext = React.createContext(null);\r\n\r\nexport default ({ children }) => {\r\n  const mapRef = useRef();\r\n  const [eventsData, setEventsData] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [searchedData, setSearchedData] = useState([]);\r\n  const [searchedEventPosition, setSearchedEventPosition] = useState([]);\r\n  const [locationInfo, setLocationInfo] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n      try {\r\n        const res = await fetch(\r\n          \"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\"\r\n        );\r\n        const { events } = await res.json();\r\n        setData(events);\r\n\r\n        const wildfires = events.filter(\r\n          (ev) => ev.categories[0].title === WILDFIRES\r\n        );\r\n\r\n        const volcanoes = events.filter(\r\n          (ev) => ev.categories[0].title === VOLCANOES\r\n        );\r\n        const ices = events.filter((ev) => ev.categories[0].title === ICES);\r\n        const storms = events.filter((ev) => ev.categories[0].title === STORMS);\r\n\r\n        setEventsData([[...wildfires], [...volcanoes], [...ices], [...storms]]);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const store = {\r\n    mapRef,\r\n    eventsData,\r\n    setEventsData,\r\n    data,\r\n    setData,\r\n    searchedData,\r\n    setSearchedData,\r\n    searchedEventPosition,\r\n    setSearchedEventPosition,\r\n    locationInfo,\r\n    setLocationInfo,\r\n    storeLoading: [loading, setLoading],\r\n  };\r\n\r\n  return (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport useSupercluster from \"use-supercluster\";\r\nimport { WILDFIRES, VOLCANOES, ICES, STORMS } from \"../constans/constans\";\r\nimport Event from \"./Event\";\r\nimport Cluster from \"./Cluster\";\r\nimport LocationInfoBox from \"../Components/LocationInfoBox\";\r\nimport Header from \"../Components/Header\";\r\nimport \"../App.scss\";\r\nimport { StoreContext } from \"../store\";\r\n\r\nexport default function Map() {\r\n  const {\r\n    searchedEventPosition,\r\n    eventsData,\r\n    mapRef,\r\n    locationInfo,\r\n    setLocationInfo,\r\n  } = useContext(StoreContext);\r\n\r\n  const [wildfires, volcanoes, ices, storms] = eventsData;\r\n\r\n  const [bounds, setBounds] = useState(null);\r\n  const [zoom, setZoom] = useState(10);\r\n\r\n  const [eventsType, setEventsType] = useState({\r\n    wildfires: true,\r\n    volcanoes: true,\r\n    ices: true,\r\n    storms: true,\r\n  });\r\n\r\n  function points(events) {\r\n    return (\r\n      events !== undefined &&\r\n      events.map((ev) => ({\r\n        type: \"Feature\",\r\n        properties: {\r\n          cluster: false,\r\n          evId: ev.id,\r\n          category: ev.categories[0].title,\r\n          title: ev.title,\r\n          date: ev.geometries[ev.geometries.length - 1].date,\r\n        },\r\n        geometry: {\r\n          type: \"Point\",\r\n          coordinates: [\r\n            parseFloat(ev.geometries[ev.geometries.length - 1].coordinates[0]),\r\n            parseFloat(ev.geometries[ev.geometries.length - 1].coordinates[1]),\r\n          ],\r\n        },\r\n      }))\r\n    );\r\n  }\r\n\r\n  const wildfiresPoints = points(wildfires);\r\n  const volcanoesPoints = points(volcanoes);\r\n  const icesPoints = points(ices);\r\n  const stormsPoints = points(storms);\r\n\r\n  function useClusterHook(points) {\r\n    const { clusters, supercluster } = useSupercluster({\r\n      points: points,\r\n      bounds,\r\n      zoom,\r\n      options: { radius: 75, maxZoom: 20 },\r\n    });\r\n    return { clusters, supercluster };\r\n  }\r\n\r\n  const wildfiresClusters = useClusterHook(wildfiresPoints);\r\n  const volcanoesClusters = useClusterHook(volcanoesPoints);\r\n  const icesClusters = useClusterHook(icesPoints);\r\n  const stormsClusters = useClusterHook(stormsPoints);\r\n\r\n  const closeLocationInfo = () => {\r\n    setLocationInfo(null);\r\n  };\r\n\r\n  const markers = (clusters, superclusters, type) => {\r\n    return clusters.map((cluster) => {\r\n      const [longitude, latitude] = cluster.geometry.coordinates;\r\n      const { cluster: isCluster, point_count: pointCount } =\r\n        cluster.properties;\r\n\r\n      const eventClassName =\r\n        searchedEventPosition[0] === cluster.geometry.coordinates[0] &&\r\n        searchedEventPosition[1] === cluster.geometry.coordinates[1]\r\n          ? \"-searched\"\r\n          : \"\";\r\n\r\n      if (isCluster) {\r\n        return (\r\n          <Cluster\r\n            key={cluster.id}\r\n            cluster={cluster}\r\n            superclusters={superclusters}\r\n            lng={longitude}\r\n            lat={latitude}\r\n            pointCount={pointCount}\r\n            type={type}\r\n            mapRef={mapRef}\r\n            closeLocationInfo={closeLocationInfo}\r\n          />\r\n        );\r\n      }\r\n\r\n      return (\r\n        <Event\r\n          key={cluster.properties.evId}\r\n          cluster={cluster}\r\n          lat={latitude}\r\n          lng={longitude}\r\n          setLocationInfo={setLocationInfo}\r\n          searchedEventPosition={searchedEventPosition}\r\n          className={eventClassName}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <>\r\n        <Header setEventsType={setEventsType} />\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_KEY }}\r\n          defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\r\n          defaultZoom={4}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({ map }) => {\r\n            mapRef.current = map;\r\n          }}\r\n          onChange={({ zoom, bounds }) => {\r\n            setZoom(zoom);\r\n            setBounds([\r\n              bounds.nw.lng,\r\n              bounds.se.lat,\r\n              bounds.se.lng,\r\n              bounds.nw.lat,\r\n            ]);\r\n          }}\r\n        >\r\n          {eventsType.wildfires &&\r\n            markers(\r\n              wildfiresClusters.clusters,\r\n              wildfiresClusters.supercluster,\r\n              WILDFIRES\r\n            )}\r\n          {eventsType.volcanoes &&\r\n            markers(\r\n              volcanoesClusters.clusters,\r\n              volcanoesClusters.supercluster,\r\n              VOLCANOES\r\n            )}\r\n          {eventsType.ices &&\r\n            markers(icesClusters.clusters, icesClusters.supercluster, ICES)}\r\n          {eventsType.storms &&\r\n            markers(\r\n              stormsClusters.clusters,\r\n              stormsClusters.supercluster,\r\n              STORMS\r\n            )}\r\n        </GoogleMapReact>\r\n\r\n        {locationInfo && (\r\n          <LocationInfoBox\r\n            info={locationInfo}\r\n            closeLocationInfo={closeLocationInfo}\r\n          />\r\n        )}\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport Button from \"@mui/material/Button\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport { InputAdornment } from \"@mui/material\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { StoreContext } from \"../store\";\r\n\r\nimport {\r\n  WILDFIRE_SRC,\r\n  VOLCANO_SRC,\r\n  ICE_SRC,\r\n  STORM_SRC,\r\n} from \"../constans/constans\";\r\nimport { WILDFIRES, VOLCANOES, ICES, STORMS } from \"../constans/constans\";\r\n\r\nexport default function Search() {\r\n  const {\r\n    searchedData,\r\n    setSearchedData,\r\n    data,\r\n    setSearchedEventPosition,\r\n    mapRef,\r\n    setLocationInfo,\r\n  } = useContext(StoreContext);\r\n\r\n  const searchEvents = (inputValue) => {\r\n    const regex = new RegExp(`${inputValue}`, \"ig\");\r\n    setSearchedData([...data.filter((ev) => regex.test(ev.title))]);\r\n  };\r\n\r\n  const [inputValue, setInputValue] = useState([]);\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    searchEvents(inputValue);\r\n    setInputValue(\"\");\r\n    e.preventDefault();\r\n  };\r\n\r\n  const [state, setState] = useState(false);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState(open);\r\n  };\r\n\r\n  const list = () => (\r\n    <Box\r\n      sx={{ width: 300 }}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {searchedData.map((event) => (\r\n          <ListItem\r\n            button\r\n            key={event.id}\r\n            onClick={() => (\r\n              toggleDrawer(false),\r\n              mapRef.current.panTo({\r\n                lat: event.geometries[event.geometries.length - 1]\r\n                  .coordinates[1],\r\n                lng: event.geometries[event.geometries.length - 1]\r\n                  .coordinates[0],\r\n              }),\r\n              mapRef.current.setZoom(9),\r\n              setSearchedData([]),\r\n              setSearchedEventPosition([\r\n                ...event.geometries[event.geometries.length - 1].coordinates,\r\n              ])\r\n            )}\r\n          >\r\n            <ListItemIcon>\r\n              {event.categories[0].title === WILDFIRES && (\r\n                <Avatar sx={{ bgcolor: grey[300] }}>\r\n                  <img\r\n                    src={WILDFIRE_SRC}\r\n                    alt={WILDFIRES}\r\n                    className=\"event-list-img\"\r\n                  />\r\n                </Avatar>\r\n              )}\r\n              {event.categories[0].title === VOLCANOES && (\r\n                <Avatar sx={{ bgcolor: grey[300] }}>\r\n                  <img\r\n                    src={VOLCANO_SRC}\r\n                    alt={VOLCANOES}\r\n                    className=\"event-list-img\"\r\n                  />\r\n                </Avatar>\r\n              )}\r\n              {event.categories[0].title === ICES && (\r\n                <Avatar sx={{ bgcolor: grey[300] }}>\r\n                  <img src={ICE_SRC} alt={ICES} className=\"event-list-img\" />\r\n                </Avatar>\r\n              )}\r\n              {event.categories[0].title === STORMS && (\r\n                <Avatar sx={{ bgcolor: grey[300] }}>\r\n                  <img\r\n                    src={STORM_SRC}\r\n                    alt={STORMS}\r\n                    className=\"event-list-img\"\r\n                  />\r\n                </Avatar>\r\n              )}\r\n            </ListItemIcon>\r\n            <ListItemText primary={event.title} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n        <Button onClick={(() => setLocationInfo(null), toggleDrawer(true))}>\r\n          <SearchIcon fontSize=\"medium\" sx={{ m: 1, color: grey[500] }} />\r\n        </Button>\r\n        <Drawer open={state} onClose={toggleDrawer(false)}>\r\n          <Box\r\n            component=\"form\"\r\n            sx={{\r\n              \"& > :not(style)\": { m: 1, width: \"37ch\" },\r\n            }}\r\n            noValidate\r\n            autoComplete=\"off\"\r\n            onSubmit={handleSubmit}\r\n          >\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Search ...\"\r\n              variant=\"standard\"\r\n              InputProps={{\r\n                type: \"search\",\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton edge=\"end\" type=\"submit\">\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              value={inputValue}\r\n              onChange={handleChange}\r\n            />\r\n          </Box>\r\n          {list()}\r\n        </Drawer>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport dotenv from \"dotenv\";\r\nimport Spinner from \"./Components/Spinner\";\r\nimport Map from \"./Components/Map\";\r\nimport Search from \"./Components/Search\";\r\nimport \"./App.scss\";\r\nimport { StoreContext } from \"./store\";\r\n\r\ndotenv.config();\r\n\r\nexport default function App() {\r\n  const { storeLoading } = useContext(StoreContext);\r\n  const [loading] = storeLoading;\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <div className=\"grid\">\r\n          <Search />\r\n          <Map />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport StoreProvider from \"./store\";\r\n\r\nReactDOM.render(\r\n  <StoreProvider>\r\n    <App />\r\n  </StoreProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}